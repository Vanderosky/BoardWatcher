@page "/chess"
@page "/chess/{gameId}"

@using BoardWatcher.Data
@inject ChessGameStateService GameStateService
@inject IJSRuntime JSRuntime
@using System.Net.WebSockets
@using System.Text
@using System.Threading

@if (gameId != null)
{
    <div class="center">
        <h1>Game ID: @gameId</h1>
    </div>
}
@if (gameBoard == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-container">
        <div class="flex-child">
            <table class="chess-board">
                <tbody>
                    <tr>
                        <th></th>
                        <th>a</th>
                        <th>b</th>
                        <th>c</th>
                        <th>d</th>
                        <th>e</th>
                        <th>f</th>
                        <th>g</th>
                        <th>h</th>
                    </tr>

                    <tr>
                        <th>8</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[0 + i])</td } else { <td class="dark">@GetPiece(gameBoard[1 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>7</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[8 + i])</td } else { <td class="light">@GetPiece(gameBoard[9 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>6</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[16 + i])</td } else { <td class="dark">@GetPiece(gameBoard[17
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>5</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[24 + i])</td } else { <td class="light">@GetPiece(gameBoard[25
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>4</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[32 + i])</td } else { <td class="dark">@GetPiece(gameBoard[33
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>3</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[40 + i])</td } else { <td class="light">@GetPiece(gameBoard[41
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>2</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[48 + i])</td } else { <td class="dark">@GetPiece(gameBoard[49
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>1</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[56 + i])</td } else { <td class="light">@GetPiece(gameBoard[57
                    + i])</td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
            <div class="stateMenu">
                <button class="btn btn-primary"> <span class="oi oi-media-skip-backward" aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveBackwards"> <span class="oi oi-media-step-backward"
                    aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveForward"> <span class="oi oi-media-step-forward"
                    aria-hidden="true"></span></button>
                <button class="btn btn-primary"> <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        </div>
        <div class="flex-child">
            <table class="table">
                <thead>
                    <tr>
                        <th>Move</th>
                        <th>Whites</th>
                        <th>Blacks</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int index = 0; index < MovesInNotation.Count - 1; index += 2)
                    {
                        <tr>
                            <td>@(index / 2).</td>
                            <td>@MovesInNotation[index]</td>
                            <td>@MovesInNotation[index + 1]</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="center">
                <button class="btn btn-primary" @onclick="DownloadFile">Download PGN File</button>
            </div>
        </div>
    </div>
}

@code {
    private PieceCV[] gameBoard;
    private Move[] MovesHistory;
    private List<string> MovesInNotation = new List<string>();
    private int moveCounter;

    [Parameter]
    public string gameId { get; set; }

    private CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    private ClientWebSocket webSocket = new ClientWebSocket();
    private  string message = "Hello, websocket!";
    private string log = "";
    protected override async Task OnInitializedAsync()
    {
        gameBoard = await GameStateService.GetPieceData();
        moveCounter = 0;
        Move[] moves = new Move[]
        {
            new Move(1 ,48, 40),
            new Move(1, 9, 17),
            new Move(1, 50, 42),
            new Move(4, 2, 16),
            new Move(3 ,62, 47),
            new Move(4, 16, 52),
            new Move(4, 61, 52)
        };
        MovesHistory = moves;
        foreach (Move move in MovesHistory)
        {
            MovesInNotation.Add(getMoveInNotation(move));
        }
        await webSocket.ConnectAsync(new Uri("wss://echo.websocket.org"), disposalTokenSource.Token);
        _ = ReceiveLoop();
    }


    public void moveForward()
    {
        if (moveCounter < MovesHistory.Length)
        {
            Move currentMove = MovesHistory[moveCounter];
            this.gameBoard[currentMove.toField] = this.gameBoard[currentMove.fromField];
            this.gameBoard[currentMove.fromField] = getClearField();
            if (moveCounter < MovesHistory.Length) moveCounter++;
        }
    }
    public void moveBackwards()
    {
        if (moveCounter > 0) moveCounter--;
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
            log += $"Received: {receivedAsText}\n";
            StateHasChanged();
        }
    }

    public void moveFastForward()
    {
        moveCounter = MovesHistory.Length;
    }

    public void moveFastBackwards()
    {
        moveCounter = 0;
    }

    public PieceCV getClearField()
    {
        return new PieceCV(0, false);
    }

    public string getMoveInNotation(Move move)
    {
        string fieldName = "";
        fieldName += getPieceName(move.pieceId);
        if (gameBoard[move.toField].Id != 0) // check if capture
        {
            fieldName += "x";
        }
        fieldName += ((char)(move.toField % 8 + 97));
        fieldName += (8 - move.toField / 8).ToString();
        return fieldName;
    }

    public async void DownloadFile()
    {
        string fileContent = "";
        foreach (string move in MovesInNotation)
        {
            fileContent += move;
            fileContent += " ";
        }
        await JSRuntime.InvokeAsync<object>("FileSave", "PGN", fileContent);
    }

    public string getPieceName(int pieceId)
    {
        switch (pieceId)
        {
            case 0:
                return "";
            case 1:
                return ""; // pawn
            case 2:
                return "R"; // rook
            case 3:
                return "N"; // knight
            case 4:
                return "B"; // bishop
            case 5:
                return "Q"; // queen
            case 6:
                return "K"; // king
        }
        return "";
    }

    public string GetPiece(PieceCV piece)
    {
        if (piece.Color)
        {
            switch (piece.Id)
            {
                case 1:
                    return "♙";
                case 2:
                    return "♖";
                case 3:
                    return "♘";
                case 4:
                    return "♗";
                case 5:
                    return "♕";
                case 6:
                    return "♔";
                default:
                    return "";
            }
        }
        else
        {
            switch (piece.Id)
            {
                case 1:
                    return "♟";
                case 2:
                    return "♜";
                case 3:
                    return "♞";
                case 4:
                    return "♝";
                case 5:
                    return "♛";
                case 6:
                    return "♚";
                default:
                    return "";
            }
        }
    }
}
