@page "/chess"

@using BoardWatcher.Data
@inject ChessGameStateService GameStateService


@if (gameBoard == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-container">
        <div class="flex-child">
            <table class="chess-board">
                <tbody>
                    <tr>
                        <th></th>
                        <th>a</th>
                        <th>b</th>
                        <th>c</th>
                        <th>d</th>
                        <th>e</th>
                        <th>f</th>
                        <th>g</th>
                        <th>h</th>
                    </tr>

                    <tr>
                        <th>8</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[0 + i])</td } else { <td class="dark">@GetPiece(gameBoard[1 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>7</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[8 + i])</td } else { <td class="light">@GetPiece(gameBoard[9 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>6</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[16 + i])</td } else { <td class="dark">@GetPiece(gameBoard[17
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>5</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[24 + i])</td } else { <td class="light">@GetPiece(gameBoard[25
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>4</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[32 + i])</td } else { <td class="dark">@GetPiece(gameBoard[33
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>3</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[40 + i])</td } else { <td class="light">@GetPiece(gameBoard[41
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>2</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[48 + i])</td } else { <td class="dark">@GetPiece(gameBoard[49
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>1</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[56 + i])</td } else { <td class="light">@GetPiece(gameBoard[57
                    + i])</td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
            <div class="stateMenu">
                <button class="btn btn-primary"> <span class="oi oi-media-skip-backward" aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveBackwards"> <span class="oi oi-media-step-backward"
                    aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveForward"> <span class="oi oi-media-step-forward"
                    aria-hidden="true"></span></button>
                <button class="btn btn-primary"> <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        </div>
        <div class="flex-child">
        <table class="table">
            <thead>
                <tr>
                    <th>Move</th>
                    <th>Whites</th>
                    <th>Black</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>22.</td>
                    <td>xh3</td>
                    <td>xf4</td>
                </tr>
                <tr>
                    <td>23.</td>
                    <td>f3</td>
                    <td>d5</td>
                </tr>
            </tbody>
        </table>
        </div>
    </div>
}

@code {
    private Piece[] gameBoard;
    private int moveForwardCounter;
    private int moveBackwardsCounter;
    protected override async Task OnInitializedAsync()
    {
        gameBoard = await GameStateService.GetPieceData();
        moveForwardCounter = 0;
        moveBackwardsCounter = 0;
    }

    public void moveForward()
    {
        this.gameBoard[40] = this.gameBoard[48];
        this.gameBoard[48] = getClearField();
        moveForwardCounter++;
    }
    public void moveBackwards()
    {
        this.gameBoard[48] = this.gameBoard[40];
        this.gameBoard[40] = getClearField();
        moveBackwardsCounter++;
    }

    public void moveFastForward()
    {
        moveForwardCounter = 0;
    }

    public void moveFastBackwards()
    {
        moveBackwardsCounter = 0;

    }

    public Piece getClearField()
    {
        return new Piece(0, false);
    }

    public string GetPiece(Piece piece)
    {
        if (piece.Color)
        {
            switch (piece.Id)
            {
                case 1:
                    return "♙";
                case 2:
                    return "♖";
                case 3:
                    return "♘";
                case 4:
                    return "♗";
                case 5:
                    return "♕";
                case 6:
                    return "♔";
                default:
                    return "";
            }
        }
        else
        {
            switch (piece.Id)
            {
                case 1:
                    return "♟";
                case 2:
                    return "♜";
                case 3:
                    return "♞";
                case 4:
                    return "♝";
                case 5:
                    return "♛";
                case 6:
                    return "♚";
                default:
                    return "";
            }
        }
    }
}
