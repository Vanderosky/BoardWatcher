@page "/chess"

<table class="chess-board">
    <tbody>
        <tr>
            <th></th>
            <th>a</th>
            <th>b</th>
            <th>c</th>
            <th>d</th>
            <th>e</th>
            <th>f</th>
            <th>g</th>
            <th>h</th>
        </tr>

        @* @for (var i = 8; i > 0; i--)
            {
            <tr>
            <th>@i</th>
            @if (i % 2 == 0)
            {
            <td class="light">♜</td>
            <td class="dark">♞</td>
            <td class="light">♝</td>
            <td class="dark">♛</td>
            <td class="light">♚</td>
            <td class="dark">♝</td>
            <td class="light">♞</td>
            <td class="dark">♜</td>
            }
            else
            {
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            }
            </tr>
            } *@
        <tr>
            <th>8</th>
            <td class="light">♜</td>
            <td class="dark">♞</td>
            <td class="light">♝</td>
            <td class="dark">♛</td>
            <td class="light">♚</td>
            <td class="dark">♝</td>
            <td class="light">♞</td>
            <td class="dark">♜</td>
        </tr>
        <tr>
            <th>7</th>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
        </tr>
        <tr>
            <th>6</th>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
        </tr>
        <tr>
            <th>5</th>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
        </tr>
        <tr>
            <th>4</th>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
        </tr>
        <tr>
            <th>3</th>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
        </tr>
        <tr>
            <th>2</th>
            <td class="light">♙</td>
            <td class="dark">♙</td>
            <td class="light">♙</td>
            <td class="dark">♙</td>
            <td class="light">♙</td>
            <td class="dark">♙</td>
            <td class="light">♙</td>
            <td class="dark">♙</td>
        </tr>
        <tr>
            <th>1</th>
            <td class="dark">♖</td>
            <td class="light">♘</td>
            <td class="dark">♗</td>
            <td class="light">♕</td>
            <td class="dark">♔</td>
            <td class="light">♗</td>
            <td class="dark">♘</td>
            <td class="light">♖</td>
        </tr>
    </tbody>
</table>
<div class="stateMenu">
    <button class="btn btn-primary"> <span class="oi oi-media-skip-backward" aria-hidden="true"></span></button>
    <button class="btn btn-primary"> <span class="oi oi-media-step-backward" aria-hidden="true"></span></button>
    <button class="btn btn-primary"> <span class="oi oi-media-step-forward" aria-hidden="true"></span></button>
    <button class="btn btn-primary"> <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
</div>

@code {
    public class Piece
    {
        public Piece(int id, Boolean colour)
        {
            this.Id = id;
            this.Colour = colour;
        }
        private int id;
        public int Id 
        { 
            get { return Id; }
            set { Id = value; }
        }
        private Boolean colour;
        public Boolean Colour
        { 
            get { return Colour; }
            set { Colour = value; }
        }

    }

    public class GameState
    {
        private string Event { get; set; }
        private string Site { get; set; }
        private string Date { get; set; }
        private string Round { get; set; }
        private string White { get; set; }
        private string Black { get; set; }
        private string Result { get; set; }
        private Piece[] board;

        private Piece[] Board
        { 
            get { return Board; }
            set { Board = value; }
        }
        public void generateNewBoard()
        {
            Piece[] pieces = new Piece[64];
            Piece[] blackPieces = new Piece[]
            {
                new Piece(2, false),
                new Piece(3, false),
                new Piece(4, false),
                new Piece(5, false),
                new Piece(6, false),
                new Piece(4, false),
                new Piece(3, false),
                new Piece(2, false),

                new Piece(1, false),
                new Piece(1, false),
                new Piece(1, false),
                new Piece(1, false),
                new Piece(1, false),
                new Piece(1, false),
                new Piece(1, false),
                new Piece(1, false)
            };
            Piece[] whitePieces = new Piece[]
            {
                new Piece(1, true),
                new Piece(1, true),
                new Piece(1, true),
                new Piece(1, true),
                new Piece(1, true),
                new Piece(1, true),
                new Piece(1, true),
                new Piece(1, true),

                new Piece(2, true),
                new Piece(3, true),
                new Piece(4, true),
                new Piece(5, true),
                new Piece(6, true),
                new Piece(4, true),
                new Piece(3, true),
                new Piece(2, true)
            };
            pieces.Concat(blackPieces).ToArray();
            for(int i = 0; i < 32; i++)
            {
                pieces.Append(new Piece(0, false));
            }
            pieces.Concat(whitePieces).ToArray();
        }

        public string GetPiece(int tileId)
        {
            Piece tmpPiece = this.Board[tileId];
            if (tmpPiece.Colour)
            {
                switch (tmpPiece.Id)
                {
                    case 1:
                        return "♟";
                    case 2:
                        return "♜";
                    case 3:
                        return "♞";
                    case 4:
                        return "♝";
                    case 5:
                        return "♛";
                    case 6:
                        return "♚";
                    default:
                        return "";
                }
            } else
            {
                switch (tmpPiece.Id)
                {
                    case 1:
                        return "♙";
                    case 2:
                        return "♖";
                    case 3:
                        return "♘";
                    case 4:
                        return "♗";
                    case 5:
                        return "♕";
                    case 6:
                        return "♔";
                    default:
                        return "";
                }
            }
        }

        public void GameStateParser(string input)
        {
            //TODO
        }
    }
    private GameState gameState = new GameState();
    protected override void OnInitialized()
    {
    }
}
