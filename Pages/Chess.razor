@page "/chess"

<table class="chess-board">
    <tbody>
        <tr>
            <th></th>
            <th>a</th>
            <th>b</th>
            <th>c</th>
            <th>d</th>
            <th>e</th>
            <th>f</th>
            <th>g</th>
            <th>h</th>
        </tr>

        @* @for (var i = 8; i > 0; i--)
            {
            <tr>
            <th>@i</th>
            @if (i % 2 == 0)
            {
            <td class="light">♜</td>
            <td class="dark">♞</td>
            <td class="light">♝</td>
            <td class="dark">♛</td>
            <td class="light">♚</td>
            <td class="dark">♝</td>
            <td class="light">♞</td>
            <td class="dark">♜</td>
            }
            else
            {
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            }
            </tr>
            } *@
        <tr>
            <th>8</th>
            <td class="light">♜</td>
            <td class="dark">♞</td>
            <td class="light">♝</td>
            <td class="dark">♛</td>
            <td class="light">♚</td>
            <td class="dark">♝</td>
            <td class="light">♞</td>
            <td class="dark">♜</td>
        </tr>
        <tr>
            <th>7</th>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
            <td class="dark">♟</td>
            <td class="light">♟</td>
        </tr>
        <tr>
            <th>6</th>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
        </tr>
        <tr>
            <th>5</th>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
        </tr>
        <tr>
            <th>4</th>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
        </tr>
        <tr>
            <th>3</th>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
            <td class="dark"></td>
            <td class="light"></td>
        </tr>
        <tr>
            <th>2</th>
            <td class="light">♙</td>
            <td class="dark">♙</td>
            <td class="light">♙</td>
            <td class="dark">♙</td>
            <td class="light">♙</td>
            <td class="dark">♙</td>
            <td class="light">♙</td>
            <td class="dark">♙</td>
        </tr>
        <tr>
            <th>1</th>
            <td class="dark">♖</td>
            <td class="light">♘</td>
            <td class="dark">♗</td>
            <td class="light">♕</td>
            <td class="dark">♔</td>
            <td class="light">♗</td>
            <td class="dark">♘</td>
            <td class="light">♖</td>
        </tr>
    </tbody>
</table>
<div class="stateMenu">
    <button class="btn btn-primary"> <span class="oi oi-media-skip-backward" aria-hidden="true"></span></button>
    <button class="btn btn-primary"> <span class="oi oi-media-step-backward" aria-hidden="true"></span></button>
    <button class="btn btn-primary"> <span class="oi oi-media-step-forward" aria-hidden="true"></span></button>
    <button class="btn btn-primary"> <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
</div>

@code {
    public class Piece
    {
        public Piece(int id, Boolean colour, Coords coord)
        {
            this.Id = id;
            this.Colour = colour;
            this.Coord = coord;
        }
        private int Id { get; set; }
        private Boolean Colour { get; set; }
        private Coords Coord { get; set; }

    }
    public struct Coords
    {
        public Coords(double x, double y)
        {
            X = x;
            Y = y;
        }

        private double X { get; }
        private double Y { get; }
    }
    public class GameState
    {
        private string Event { get; set; }
        private string Site { get; set; }
        private string Date { get; set; }
        private string Round { get; set; }
        private string White { get; set; }
        private string Black { get; set; }
        private string Result { get; set; }
        private Move[] Moves { get; set; }
        private Piece[] GamePieces = new Piece[32];

        public void generateNewGamePieces()
        {
            Piece[] newPieces = new Piece[] 
            {
                // first black row
                new Piece(0, false, new Coords(8, 1)),
                new Piece(1, false, new Coords(8, 2)),
                new Piece(2, false, new Coords(8, 3)),
                new Piece(3, false, new Coords(8, 4)),
                new Piece(4, false, new Coords(8, 5)),
                new Piece(2, false, new Coords(8, 6)),
                new Piece(1, false, new Coords(8, 7)),
                new Piece(0, false, new Coords(8, 8)),
                // second black row (pawns)
                new Piece(5, false, new Coords(7, 1)),
                new Piece(5, false, new Coords(7, 2)),
                new Piece(5, false, new Coords(7, 3)),
                new Piece(5, false, new Coords(7, 4)),
                new Piece(5, false, new Coords(7, 5)),
                new Piece(5, false, new Coords(7, 6)),
                new Piece(5, false, new Coords(7, 7)),
                new Piece(5, false, new Coords(7, 8)),
                // first white row (pawns)
                new Piece(5, true, new Coords(2, 1)),
                new Piece(5, true, new Coords(2, 2)),
                new Piece(5, true, new Coords(2, 3)),
                new Piece(5, true, new Coords(2, 4)),
                new Piece(5, true, new Coords(2, 5)),
                new Piece(5, true, new Coords(2, 6)),
                new Piece(5, true, new Coords(2, 7)),
                new Piece(5, true, new Coords(2, 8)),
                // second white row
                new Piece(0, true, new Coords(1, 1)),
                new Piece(1, true, new Coords(1, 2)),
                new Piece(2, true, new Coords(1, 3)),
                new Piece(3, true, new Coords(1, 4)),
                new Piece(4, true, new Coords(1, 5)),
                new Piece(2, true, new Coords(1, 6)),
                new Piece(1, true, new Coords(1, 7)),
                new Piece(0, true, new Coords(1, 8)),
            };
        }

        public void GameStateParser(string input)
        {
            //TODO
        }
    }

    public struct Move
    {
        private int MoveId { get; }
        private int Piece { get; }
        private int CordX { get; }
        private int CordY { get; }

        //TO FINISH WITH GameStateParser
    }
}
