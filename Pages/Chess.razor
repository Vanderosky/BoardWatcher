@page "/chess"

@using BoardWatcher.Data
@inject ChessGameStateService GameStateService


@if (gameBoard == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-container">
        <div class="flex-child">
            <table class="chess-board">
                <tbody>
                    <tr>
                        <th></th>
                        <th>a</th>
                        <th>b</th>
                        <th>c</th>
                        <th>d</th>
                        <th>e</th>
                        <th>f</th>
                        <th>g</th>
                        <th>h</th>
                    </tr>

                    <tr>
                        <th>8</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[0 + i])</td } else { <td class="dark">@GetPiece(gameBoard[1 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>7</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[8 + i])</td } else { <td class="light">@GetPiece(gameBoard[9 +
                    i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>6</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[16 + i])</td } else { <td class="dark">@GetPiece(gameBoard[17
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>5</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[24 + i])</td } else { <td class="light">@GetPiece(gameBoard[25
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>4</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[32 + i])</td } else { <td class="dark">@GetPiece(gameBoard[33
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>3</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[40 + i])</td } else { <td class="light">@GetPiece(gameBoard[41
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>2</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="light">@GetPiece(gameBoard[48 + i])</td } else { <td class="dark">@GetPiece(gameBoard[49
                    + i])</td>
                            }
                        }
                    </tr>
                    <tr>
                        <th>1</th>
                        @for (var i = 0; i < 8; i++)
                        {
                            if (i % 2 == 0)
                            {
                                <td class="dark">@GetPiece(gameBoard[56 + i])</td } else { <td class="light">@GetPiece(gameBoard[57
                    + i])</td>
                            }
                        }
                    </tr>
                </tbody>
            </table>
            <div class="stateMenu">
                <button class="btn btn-primary"> <span class="oi oi-media-skip-backward" aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveBackwards"> <span class="oi oi-media-step-backward"
                    aria-hidden="true"></span></button>
                <button class="btn btn-primary" @onclick="moveForward"> <span class="oi oi-media-step-forward"
                    aria-hidden="true"></span></button>
                <button class="btn btn-primary"> <span class="oi oi-media-skip-forward" aria-hidden="true"></span></button>
            </div>
        </div>
        <div class="flex-child">
        <table class="table">
            <thead>
                <tr>
                    <th>Move</th>
                    <th>Whites</th>
                    <th>Blacks</th>
                </tr>
            </thead>
            <tbody>
            @for (int index = 0; index < MovesHistory.Length; index++)
            {
                <tr>
                    <td>@index</td>
                    <td>@getMoveInNotation(MovesHistory[index])</td>
                </tr>
            }
            </tbody>
        </table>
        </div>
    </div>
}

@code {
    private Piece[] gameBoard;
    private Move[] MovesHistory;
    private int moveCounter;
    protected override async Task OnInitializedAsync()
    {
        gameBoard = await GameStateService.GetPieceData();
        moveCounter = 0;
        Move[] moves = new Move[]
        {
            new Move(2 ,48, 40),
            new Move(2, 49, 41),
            new Move(4, 50, 42),
            new Move(5, 40, 32)
        };
        MovesHistory = moves;
    }


    public void moveForward()
    {
        Move currentMove = MovesHistory[moveCounter];
        this.gameBoard[currentMove.toField] = this.gameBoard[currentMove.fromField];
        this.gameBoard[currentMove.fromField] = getClearField();
        if (moveCounter < MovesHistory.Length - 1) moveCounter++;
    }
    public void moveBackwards()
    {
        if (moveCounter > 0) moveCounter--;
    }

    public void moveFastForward()
    {
        moveCounter = MovesHistory.Length;
    }

    public void moveFastBackwards()
    {
        moveCounter = 0;
    }

    public Piece getClearField()
    {
        return new Piece(0, false);
    }

    public string getMoveInNotation(Move move)
    {
        string fieldName = "";
        fieldName += getPieceName(move.pieceId);
        fieldName += ((char) (move.toField % 8 + 97));
        fieldName += (8 - move.toField / 8).ToString();
        return fieldName;
    }

    public string getPieceName(int pieceId)
    {
        switch (pieceId)
        {
            case 0:
                return "";
            case 1:
                return ""; // pawn
            case 2:
                return "R"; // rook
            case 3:
                return "N"; // knight
            case 4:
                return "B"; // bishop
            case 5:
                return "Q"; // queen
            case 6:
                return "K"; // king
        }
        return "";
    }

    public string GetPiece(Piece piece)
    {
        if (piece.Color)
        {
            switch (piece.Id)
            {
                case 1:
                    return "♙";
                case 2:
                    return "♖";
                case 3:
                    return "♘";
                case 4:
                    return "♗";
                case 5:
                    return "♕";
                case 6:
                    return "♔";
                default:
                    return "";
            }
        }
        else
        {
            switch (piece.Id)
            {
                case 1:
                    return "♟";
                case 2:
                    return "♜";
                case 3:
                    return "♞";
                case 4:
                    return "♝";
                case 5:
                    return "♛";
                case 6:
                    return "♚";
                default:
                    return "";
            }
        }
    }
}
